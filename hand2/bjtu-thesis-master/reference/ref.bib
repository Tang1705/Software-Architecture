@article{apriori,
  title={面向数据的软件体系结构初步探讨*},
  author={苗放[1 and 2]},
  journal={计算机科学与探索},
  number={10},
  year={2016},
}

@phdthesis{la, title={DOA下数据注册方法的初步研究与实现}, author={王梦佳}, school={成都理工大学}, year={2015}, }
@phdthesis{lb, title={基于DOA的面向数据的碎片化应用系统构建方法研究}, author={李国强}, school={成都理工大学}, year={2015}, }
@phdthesis{lc, title={DOA下分布式DRC的元数据分级存储模型研究}, author={袁进俊}, school={成都理工大学}, year={2015}, }
@phdthesis{ld, title={分布式数据注册中心数据分区存储策略研究}, author={刘彬}, school={成都理工大学}, year={2016}, }

@article{a,
  title={基于UML的多视图软件体系结构描述方法研究},
  author={刘宁 and 郑东霞},
  journal={计算机应用研究},
  number={11},
  pages={173-175},
}

@book{Garlan1995Introduction,
  title={Introduction to the Special Issue on Software Architecture},
  author={Garlan, David and Perry, Dewayne E},
  year={1995},
 abstract={Abstract Maintaining the consistency of multiple program representations¿such as abstract syntax trees and program dependence graphs¿in a program manipulation tool is difficult. This paper describes a hybrid software architecture for a meaning-preserving program ...},
}

@article{ShawSoftware,
  title={Software Architecture : Perspectives on an Emerging Discipline / M. Shaw, D. Garlan},
  author={Shaw, Mary and Garlan, David},
 abstract={Publisher’s description: Shaw and Garland examine the useful abstractions and paradigms of system design as well as key notations and tools. They present an introduction to software architecture that illustrates the current state of the discipline and examines ways in which architectural issues can impact software design.},
}

@inproceedings{Allen1994Formalizing,
  title={Formalizing Architectural Connection},
  author={Allen, Robert J. and Garlan, David},
  booktitle={Software Engineering, 1994. Proceedings. ICSE-16., 16th International Conference on},
  year={1994},
 abstract={As software systems become more complex the overall system structure - or software architecture - becomes a central design problem. An important step towards an engineering discipline of software is a formal basis for describing and analyzing these designs. We present a theory for one aspect of architectural description, the interactions between components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors. We provide a formal semantics and show how this lends to a sound deductive system in which architectural compatibility can be checked in a way analogous to type checking in programming languages},
}

@article{Ivar1999Unified,
  title={Unified software development process},
  author={Ivar, Jacobson and Grady, Booch and James, Rumbaugh},
  year={1999},
 abstract={This guide overviews the Unified Process for software development, with a focus on modeling using the Unified Modeling Language (UML). It demonstrates how the notation and process complement on another, using UML models to illustrate the new process in action. The authors describe semantics and notation of the different higher-level constructs used on the models. Constructs such as use cases, actors, subsystems, classes, interfaces, active classes, processes, threads, nodes, and most relations are described in the context of a model. ^^^^ Annotation c. Book News, Inc., Portland, OR (booknews.com) (Book News)},
}

@article{Kruchten2006The,
  title={The Past, Present, and Future for Software Architecture},
  author={Kruchten, P. and Obbink, H. and Stafford, J.},
  journal={IEEE Software},
  volume={23},
  number={2},
  pages={22-30},
  year={2006},
 abstract={It's been 10 years since David Garlan and Mary Shaw wrote their seminal book Software Architecture Perspective on an Emerging Discipline, since Maarten Boasson edited a special issue of IEEE Software on software architecture, and since the first International Software Architecture Workshop took place. What has happened over these 10 years? What have we learned? Where do we look for information? What's the community around this discipline? And where are we going from here?This article is part of a focus section on software architecture.},
}

@article{ShawThe,
  title={The Golden Age of Software Architecture: A Comprehensive Survey},
  author={Shaw, Mary and Clements, Paul},
 abstract={Abstract This retrospective on nearly two decades of software architecture research examines the maturation of the software architecture research area by tracing the evolution of research questions and results through their maturation cycle. We show how early qualitative results set the stage for later precision, formality, and automation, how results have built up over time, and how the research results have moved into practice.},
}

@article{DashofyA,
  title={A comprehensive approach for the development of modular software architecture description languages},
  author={Dashofy, Eric M. and Hoek, André van der and Taylor, Richard N.},
  journal={Acm Transactions on Software Engineering & Methodology},
  volume={14},
  number={2},
  pages={199-245},
 abstract={We have developed an approach that allows for the rapid  construction of new architecture description languages (ADLs). Our  approach is unique because it encapsulates ADL features in modules that  are composed to form ADLs. We achieve this by leveraging the extension mechanisms provided by XML and XML schemas. We have defined a set of generic, reusable ADL modules called xADL 2.0, useful as an ADL by itself, but also extensible to support new applications and domains. To support this extensibility, we have developed a set of reflective syntax-based tools that adapt to language changes automatically, as well  as several semantically-aware tools that provide support for advanced  features of xADL 2.0. We demonstrate the effectiveness, scalability, and  flexibility of our approach through a diverse set of experiences. First,  our approach has been applied in industrial contexts, modeling software  architectures for aircraft software and spacecraft systems. Second, we  show how xADL 2.0 can be extended to support the modeling features found  in two different representations for modeling product-line  architectures. Finally, we show how our infrastructure has been used to  support its own development. The technical contribution of our  infrastructure is augmented by several research contributions: the first  decomposition of an architecture description language into modules,  insights about how to develop new language modules and a process for  integrating them, and insights about the roles of different kinds of  tools in a modular ADL-based infrastructure},
}

@inproceedings{Mei2002ABC,
  title={ABC/ADL: An ADL Supporting Component Composition},
  author={Mei, Hong and Chen, Feng and Wang, Qianxiang and Feng, Yao Dong},
  booktitle={Proceedings of the 4th International Conference on Formal Engineering Methods: Formal Methods and Software Engineering},
  year={2002},
 abstract={Architecture Description Language (ADL) is one of the keys to software architecture research, but most attention was paid to the description of software structure and high-level analysis of some syste},
}

@inproceedings{Medvidovic2000A,
  title={A Classification and Comparison Framework for Software Architecture Description Languages},
  author={Medvidovic, Nenad and Taylor, Richard N.},
  year={2000},
 abstract={Abstract鈥擲oftware architectures shift the focus of developers from lines-of-code to coarser-grained architectural elements and their overall interconnection structure. Architecture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which of several possible ADLs is best suited for a particular problem. Furthermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation, and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modeling notations. The framework is used to classify and compare several existing ADLs, enabling us, in the process, to identify key properties of ADLs. The comparison highlights areas where existing ADLs provide extensive support and those in which they are deficient, suggesting a research agenda for the future.},
}

@article{Oquendo2004,
  title={&#960;-ADL:an Architecture Description Language based on the higher-order typed &#960;-calculus for specifying dynamic and mobile software architectures},
  author={Oquendo, Flavio},
  journal={Acm Sigsoft Software Engineering Notes},
  year={2004},
 abstract={A key aspect of the design of any software system is its architecture. An architecture description, from a runtime perspective, should provide a formal specification of the architecture in terms of components and connectors and how they are composed together. Further, a dynamic or mobile architecture description must provide a specification of how the architecture of the software system can change at runtime. Enabling specification of dynamic and mobile architectures is a large challenge for an Architecture Description Language (ADL). This article describes &pi;-ADL, a novel ADL that has been designed in the ArchWare European Project to address specification of dynamic and mobile architectures. It is a formal, well-founded theoretically language based on the higher-order typed &pi;-calculus. While most ADLs focus on describing software architectures from a structural viewpoint, &pi;-ADL focuses on formally describing architectures encompassing both the structural and behavioural viewpoints. The &pi;-ADL design principles, concepts and notation are presented. How &pi;-ADL can be used for specifying static, dynamic and mobile architectures is illustrated through case studies. The &pi;-ADL toolset is outlined.},
}

@book{Schmuller2004Sams,
  title={Sams Teach Yourself UML in 24 Hours, Complete Starter Kit (3rd Edition)},
  author={Schmuller, Joseph},
  year={2004},
}

@article{b,
  title={软件体系结构研究综述},
  author={孙昌爱 and 金茂忠 and 刘超},
  journal={软件学报},
  volume={13},
  number={7},
  pages={1228-1237},
  year={2002},
 abstract={摘　要： 近年来，软件体系结构逐渐成为软件工程领域的研究热点以及大型软件系统与软件产品线开发中的关键技术之一，归纳了软件体系结构技术发展过程及其主要研究方向，在分析了典型的软件体系结构概念之后，给出了软件体系结构的定义，通过总结软件体系结构领域的若干研究活动，提出了软件体系结构研究的两大思路，并从7个方面介绍了软件体系结构研究进展，探讨了软件体系结构研究中的不足之处，并分析其原因，作为总结，给出了软件体系结构领域最有前途的发展趋势。},
}

@article{c,
  title={软件体系结构研究进展},
  author={梅宏 and 申峻嵘},
  journal={软件学报},
  volume={17},
  number={6},
  pages={1257-1275},
  year={2006},
 abstract={作为控制软件复杂性、提高软件系统质量、支持软件开发和复用的重要手段之一,软件体系结构自提出以来,日益受到软件研究者和实践者的关注,并发展成为软件工程的一个重要的研究领域.如今,软件体系结构的研究也开始超出传统的对软件设计阶段的支持,逐步扩展到整个软件生命周期.基于软件体系结构近十年来的研究进展,综述了在软件生命周期的不同阶段软件体系结构的研究与应用,并探讨了软件体系结构领域的发展与研究方向.},
}

@article{d,
  title={双重软件体系结构描述框架XYZ/ADL},
  author={朱雪阳},
  journal={计算机研究与发展},
  volume={44},
  number={9},
  pages={1485-1494},
  year={2007},
 abstract={体系结构设计在软件开发过程中扮演着重要角色.工程中常用图形语言为软件体系结构建模，它们有直观、半形式化的优点;但是语义不够精确，难以对它们表示的模型进行分析，在这方面，形式化方法可与之互补.但在工程使用中仅用形式化语言建模又不太现实，所以如何结合二者之长以提高软件的可靠性已成为工业界和学术界共同关心的问题.提出了双重软件体系结构描述框架XYZ/ADL:支持工程中软件体系结构的基本概念，前端用一般的体系结构框图作为结构描述，用UML活动图、状态图作为抽象行为表示;后端用既可表示系统动态语义又可表示系统静态语义的时序逻辑语言XYZ/E作为一致的语义基础.前端的图形语言便于软件工程师的交流和使用，后端的形式语言是进一步的形式化分析验证的基础.},
}

@article{e,
  title={ABC／ADL：一种基于XML的软件体系结构描述语言},
  author={王晓光 and 冯耀东 and 梅宏},
  journal={计算机研究与发展},
  number={9},
  pages={1521-1531},
  year={2004},
 abstract={摘　要： 作为基于构件的软件开发过程的系统蓝图,软件体系结构(SA)扮演了非常重要的角色,其研究受到越来越多的关注.而软件体系结构描述语言(ADL)是研究和应用SA的基础.提出了一种基于XML的体系结构描述语言--ABC/ADL. ABC/ADL具备大多数ADL描述软件系统高层结构的能力,还支持系统的逐步精化与演化,并支持系统的自动化组装和验证.采用数据互操作标准XML作为元语言,不仅使ABC/ADL具有与其他ADL的互操作性,还有助于实现设计阶段的制品与其他软件生命周期阶段制品之间的可追踪性.},
}

@article{f,
  title={面向方面的软件体系结构描述语言AO-ADL},
  author={杨敬中 and 戎玫 and 张广泉 and YANGJing-zhong and RONGMei and ZHANGGuang-quan},
  journal={计算机工程},
  volume={34},
  number={10},
  pages={80-82},
  year={2008},
 abstract={分析面向方面编程(AOP)的核心思想及其优越性,将编码阶段的AOP概念进一步提升到软件体系结构层次.在软件体系结构描述语言XYZ/ADL的基础上,通过增加新的元素和相关复合机制,得到一种面向方面的体系结构描述语言AO-ADL,实现了在软件体系结构中横切功能的模块化.},
}

@article{g,
  title={软件体系结构风格研究现状及存在的问题},
  author={毛斐巧 and 齐德昱},
  journal={计算机应用研究},
  volume={25},
  number={8},
  pages={2270-2273},
  year={2008},
 abstract={摘　要： 针对现有软件体系结构风格定义在客观性和全面性方面存在的不足，从客观角度出发，站在软件工程的高度从多个方面对软件体系结构风格进行定义；同时通过研究分析软件体系结构风格的研究现状，发现并指出其四个重点研究方向及各自存在的问题。},
}

@article{h,
  title={“平台/插件”软件体系结构风格},
  author={李俊娥 and 周洞汝},
  journal={小型微型计算机系统},
  number={5},
  pages={110-115},
 abstract={体系结构发现是软件体系结构研究领域的一个重要方向.近年出现的“平台+插件”软件设计方法,使得发布后的软件产品可以方便地通过安装插件模块而扩展其功能.然而,迄今为止,未见资料将这种结构从软件体系结构的高度进行提炼和描述.本文提出“平台+插件”的软件设计方法是一种软件体系结构风格,并将其称为“平台/插件(Platform/Plug-in)”风格,简写为“P/P风格”.由于软件体系结构和体系结构风格的概念还没有一个标准的定义,文中首先定义了本文使用的模型和概念;研究了“平台/插件”结构应用程序的特点和分类,分析了该类程序的架构,在本文定义的软件体系结构模型的基础上,用统一建模语言UML描述了P/P体系结构风格及P/P风格软件的开发过程.本文工作为需要动态扩展功能的大型软件开发提供了一种可复用的体系结构风格,可以认为,P/P风格是可扩展和可增量升级软件系统的领域体系结构模型.},
}

@article{i,
  title={Customer Relationship Management System Based on Orthogonal Software Architecture%基于正交软件体系结构的CRM系统},
  author={汪保杰 and 王如龙},
  journal={计算机工程},
  volume={035},
  number={24},
  pages={117-120},
 abstract={为解决软件体系结构在应用软件领域难以实施的问题,避免软件开发的盲目性,提高软件质量,通过对正交软件体系结构理论的研究,给出其在客户关系管理系统中的运用.事实证明,正交软件体系结构具有结构清晰、易于理解和修改、重用力度大等优点.},
}

@article{j,
  title={软件体系结构测试技术的现状与思考},
  author={巩绪芳 and 周颖 and 李必信},
  number={8},
  pages={76-83},
 abstract={软件体系结构经过10年的研究和发展取得了一系列可喜的成就.目前,一些有代表性的软件测试策略被研究人员提议用于软件体系结构的测试.但是,传统的软件测试技术和方法不能直接用来解决软件体系结构的测试问题,需要改进传统的软件测试技术和方法,或者开发新的软件体系结构测试技术和方法,使之能够更好地解决软件体系结构测试中存在的问题.本文概述了软件体系结构测试策略的研究现状,剖析了影响软件软件体系结构测试的因素,并讨论了软件体系结构分析与测试的未来研究主题.},
}

@article{k,
  title={基于π演算的软件体系结构测试技术},
  author={许慧 and 伦立军},
  journal={计算机工程},
  volume={35},
  number={13},
  pages={55-57},
  year={2009},
 abstract={针对目前体系结构描述语言对描述软件系统行为方面的不足而难以生成实时测试路径的问题,提出一种基于π演算的软件体系结构测试方法,该方法包括π演算与Petri网结合、构造体系结构模型及测试路径生成算法。实验证明,该算法能够根据测试覆盖准则生成相应的测试路径,实现体系结构模型的动态性和测试技术的有效性。},
}

@article{l,
  title={构件组装及其形式化推导研究},
  author={任洪敏 and 钱乐秋},
  journal={软件学报},
  number={6},
  pages={38-46},
 abstract={基于构件的软件工程(component based software engineering,简称CBSE)能够有效地提高软件开发的质量和效率.构件组装和组装推导(compositional reasoning)是CBSE的关键技术.基于软件构件的特点,借鉴进程代数中进程构造的方法,提出6种构件组装机制,能够灵活、简便地集成软件构件,并主张在构件组装的同时进行接口组装,通过生成功能更强、抽象级别更高的复合接口,提高构件组装的抽象级别和粒度.同时,基于Wright的形式化规约软件体系结构的研究,给出了复合构件和复合接口的组装推导算法,为系统行为的形式化分析、验证和仿真奠定了基础.},
}

@article{m,
  title={基于软件体系结构的构件组装工具ABC-Tool},
  author={向俊莲 and 杨杰 and 梅宏},
  journal={计算机研究与发展},
  volume={41},
  number={6},
  pages={956-964},
  year={2004},
 abstract={摘　要： 软件朝着越来越复杂和庞大的趋势发展,因此对更有效的软件开发技术的需求十分迫切.近年来,软件体系结构、构件技术和软件复用技术等开始在软件开发中发挥重要作用,成为软件工程领域研究的热点.在基于构件复用的开发方法中,构件组装技术是关键,而且一直以来也是难点所在.ABC(architecture-based component composition)是一种基于软件体系结构、面向构件的软件开发方法.介绍了为ABC方法提供有效支持的工具ABC-Tool,ABC-Tool以软件体系结构为设计蓝图,以构件为基本开发单元,在不修改构件源代码的前提下,通过可视化的图形建模方式,从体系结构的高层设计逐层映射到底层实现,将可运行或可部署的构件组装为最终的可正确运行的系统.},
}

@article{za,
  title={面向数据的软件体系结构初步探讨*},
  author={苗放[1 and 2]},
  journal={计算机科学与探索},
  number={10},
  year={2016},
}

@phdthesis{zb,
  title={基于DOA的面向数据的碎片化应用系统构建方法研究},
  author={李国强},
  school={成都理工大学},
  year={2015},
 }

@phdthesis{zc,
  title={DOA下DAC中用户认证机制及证书授权技术研究},
  author={谭铁成},
  school={成都理工大学},
  year={2015},
}

@phdthesis{zd,
  title={DOA下DAC中数据授权机制及公共密钥基础设施研究},
  author={陈林},
  school={成都理工大学},
  year={2015},
}

@Misc{
    gamesfromwithin.com,
    author = "Noel",
    title = "Data-Oriented Design (Or Why You Might Be Shooting Yourself in The Foot With OOP)",
    howpublished = "Website",
    year = {2009},
    note = {\url{http://gamesfromwithin.com/data-oriented-design}}
}

@Misc{
    tuzipei.baijia.baidu.com,
    author = "Tu Zipei",
    title = "All business digitization: specific ideas of traditional business transformation",
    howpublished = "Website",
    year = {2015},
    note = {\url{http://tuzipei.baijia.baidu.com/article/47068.}}
}

@article{ze,
  title={科学数据共享技术平台构想},
  author={李晓波 and 祝孔强 and 贾光宇 and 徐枫 and 李集明},
  journal={中国基础科学},
  number={01},
  pages={52-57},
 abstract={进入21世纪的信息时代,科学数据对于社会和经济发展以及国家安全保障的作用更加显著,特别是科技创新直接源于科学数据的积累与应用。然而,科学数据作为一种新的战略资源和财富,只有被更多的人所共享,才能显示出其宝贵的价值。},
}

@article{zf,
  title={科学数据共享平台的数据管理研究},
  author={孙卫 and 罗之兰 and 张蔚},
  journal={科学学与科学技术管理},
  number={12},
  pages={34-38},
 abstract={运用公共经济学等相关理论对科学数据共享平台的数据进行了分类,提出了以数据付费管理、数据标准化管理和数据收费管理为核心内容的平台数据管理框架,建立了付费管理、数据标准化管理和数据收费管理的方法体系,为我国科学数据共享平台建设的不断推进和有效的数据管理提供了重要的思路和政策参考。},
}

@article{DeanMapReduce,
  title={MapReduce: Simplified Data Processing on Large Clusters},
  author={Dean, Jeffrey and Ghemawat, Sanjay},
  journal={Communications of the ACM},
  volume={51},
  number={1},
  pages={p.107-113},
 abstract={MapReduce is a programming model and an associated implementation for processing and generating large datasets that is amenable to a broad variety of real-world tasks. Users specify the computation in terms of a map and a reduce function, and the underlying runtime system automatically parallelizes the computation across large-scale clusters of machines, handles machine failures, and schedules inter-machine communication to make efficient use of the network and disks. Programmers find the system easy to use: more than ten thousand distinct MapReduce programs have been implemented internally at Google over the past four years, and an average of one hundred thousand MapReduce jobs are executed on Google's clusters every day, processing a total of more than twenty petabytes of data per day.},
}

@article{KirkpatrickBig,
  title={Big Data for Development},
  author={Kirkpatrick and Robert},
  journal={Big Data},
  volume={1},
  number={1},
  pages={3-4},
 abstract={where mobile phone use goes be- yond phone calls to trade and ``OUR WORK IS FOCUSED ON As promising as this work has banking. In those countries, mo- bile data can certainly tell compa- nies what types of bank products are most popular with users. ThatTHE EXPLOSION OF BIG DATA,ESPECIALLY IN THE PLACESWHERE THE U.N. DOES ITSbeen, however, significant ques-tions remain about how big dataanalysis can be practically inte-grated into UN systems. We know, same data could also hold infor-MOST CRUCIAL WORK.''for example, that the real-time na- mation about the well-being ofture of big data will definitely im- the vulnerable populations the UNprove development programs. In a serves.world of fast-moving, global shocks like the recent financialrecession, traditional data collection methods like door-to- Consider that in recent years, MIT researchers have founddoor household surveys have become woefully inadequate. evidence that changes in mobile phone calling patterns can be used to detect flu outbreaks.1 In addition, a Telefo麓 nica Re-What we at Global Pulse are still not sure about is exactly search team has demonstrated that calling patterns can bewhat types of digital data sources would be most useful to the},
}

@article{Hey2009The,
  title={The Fourth Paradigm: Data-Intensive Scientific Discovery},
  author={Hey, Tony and Tansley, Stewart and Tolle, Kristin},
  journal={Proceedings of the IEEE},
  volume={99},
  number={8},
  pages={1334-1337},
  year={2009},
 abstract={This book presents the first broad look at the rapidly emerging field of data-intensive science, with the goal of influencing the worldwide scientific and computing research communities and inspiring the next generation of scientists. Increasingly, scientific breakthroughs will be powered by advanced computing capabilities that help researchers manipulate and explore massive datasets. The speed at which any given scientific discipline advances will depend on how well its researchers collaborate with one another, and with technologists, in areas of eScience such as databases, workflow management, visualization, and cloud-computing technologies. This collection of essays expands on the vision of pioneering computer scientist Jim Gray for a new, fourth paradigm of discovery based on data-intensive science and offers insights into how it can be fully realized.},
}

@article{Labrinidis2012Challenges,
  title={Challenges and opportunities with big data},
  author={Labrinidis, Alexandros and H.V. Jagadish},
  journal={Proceedings of the VLDB Endowment},
  volume={5},
  number={12},
  pages={2032-2033},
  year={2012},
 abstract={The promise of data-driven decision-making is now being recognized broadly, and there is growing enthusiasm for the notion of ``Big Data.鈥欌While the promise of Big Data is real -- for example, it is estimated that Google alone contributed 54 billion dollars to the US economy in 2009 -- there is currently a wide gap between its potential and its realization.Heterogeneity, scale, timeliness, complexity, and privacy problems with Big Data impede progress at all phases of the pipeline that can create value from data. The problems start right away during data acquisition, when the data tsunami requires us to make decisions, currently in an ad hoc manner, about what data to keep and what to discard, and how to store what we keep reliably with the right metadata. Much data today is not natively in structured format; for example, tweets and blogs are weakly structured pieces of text, while images and video are structured for storage and display, but not for semantic content and search: transforming such content into a structured format for later analysis is a major challenge. The value of data explodes when it can be linked with other data, thus data integration is a major creator of value. Since most data is directly generated in digital format today, we have the opportunity and the challenge both to influence the creation to facilitate later linkage and to automatically link previously created data. Data analysis, organization, retrieval, and modeling are other foundational challenges. Data analysis is a clear bottleneck in many applications, both due to lack of scalability of the underlying algorithms and due to the complexity of the data that needs to be analyzed. Finally, presentation of the results and its interpretation by non-technical domain experts is crucial to extracting actionable knowledge.During the last 35 years, data management principles such as physical and logical independence, declarative querying and cost-based optimization have led, during the last 35 years, to a multi-billion dollar industry. More importantly, these technical advances have enabled the first round of business intelligence applications and laid the foundation for managing and analyzing Big Data today. The many novel challenges and opportunities associated with Big Data necessitate rethinking many aspects of these data management platforms, while retaining other desirable aspects. We believe that appropriate investment in Big Data will lead to a new wave of fundamental technological advances that will be embodied in the next generations of},
}



